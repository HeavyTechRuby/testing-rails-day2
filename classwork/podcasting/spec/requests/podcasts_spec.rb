require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec::Matchers.define :include_item do |id|
  match do |response|
    response.parsed_body.map { |el| el["id"] }.include? id
  end
end

RSpec.describe "Podcasts API", type: :request do
  # TODO: move to rails_helper
  # include Devise::Test::IntegrationHelpers

  describe "GET /podcasts" do
    def make_request
      get podcasts_url, as: :json
    end

    include_examples 'has successful status'
    
    it "works" do
      make_request
      expect(response).to be_successful
    end

    let!(:podcast) { FactoryBot.create :podcast }
    let!(:archived_podcast) { FactoryBot.create :podcast, :archived }

    it "includes podcast" do
      get podcasts_url, as: :json

      expect(response).to include_item(podcast.id)
    end

    it "NOT includes archived podcast" do
      get podcasts_url, as: :json

      expect(response).not_to include_item(archived_podcast.id)
    end

    it "return podcast info" do
      get podcasts_url, as: :json

      expect(response.parsed_body[0]).to include(
        "id" => podcast.id,
        "title" => podcast.title
      )

      expect(response.parsed_body[0]).not_to have_key("created_at")
    end
  end

  describe "POST /podcasts" do
    let(:valid_attributes) { FactoryBot.attributes_for(:podcast, author_id: author.id) }
    let(:author) { FactoryBot.create :user }

    def make_request
      post podcasts_url, params: { podcast: valid_attributes }, as: :json
    end

    context "when authenticated" do
      include_context 'authenticated user'

      include_examples 'has successful status'

      it "creates podcast" do
        expect do
          post podcasts_url, params: { podcast: valid_attributes }, as: :json
        end.to change(Podcast, :count).by(1)

        expect(response).to be_successful
      end

      it "provides location for new podacst" do
        post podcasts_url, params: { podcast: valid_attributes }, as: :json
        expect(response.headers).to have_key("X-Location-Url")
      end
    end

    context "when guest" do
      it "does not create podcast" do
        expect do
          post podcasts_url, params: { podcast: valid_attributes }, as: :json
        end.not_to change(Podcast, :count)
      end
    end
  end
end
